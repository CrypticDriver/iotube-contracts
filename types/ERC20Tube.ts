/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ERC20TubeInterface extends utils.Interface {
  contractName: "ERC20Tube";
  functions: {
    "concatKeys(bytes32[])": FunctionFragment;
    "deposit(address,uint256,uint256)": FunctionFragment;
    "depositTo(address,uint256,uint256,address)": FunctionFragment;
    "fees(uint256)": FunctionFragment;
    "genKey(uint256,uint256,address,address,uint256)": FunctionFragment;
    "isSettled(bytes32)": FunctionFragment;
    "ledger()": FunctionFragment;
    "lord()": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safe()": FunctionFragment;
    "setFee(uint256,uint256)": FunctionFragment;
    "setTaxRate(uint16)": FunctionFragment;
    "taxRate()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tubeID()": FunctionFragment;
    "tubeToken()": FunctionFragment;
    "unpause()": FunctionFragment;
    "verifier()": FunctionFragment;
    "withdraw(uint256,uint256,address,address,uint256,bytes)": FunctionFragment;
    "withdrawCoin(address)": FunctionFragment;
    "withdrawToken(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "concatKeys",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "genKey",
    values: [BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSettled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(functionFragment: "lord", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "safe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "taxRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tubeID", values?: undefined): string;
  encodeFunctionData(functionFragment: "tubeToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCoin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "concatKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "genKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSettled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tubeID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tubeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "FeeUpdated(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Receipt(uint256,address,address,uint256,uint256,address,uint256)": EventFragment;
    "Settled(bytes32,address[])": EventFragment;
    "TaxRateUpdated(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Receipt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type FeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tubeID: BigNumber; fee: BigNumber }
>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type ReceiptEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string, BigNumber],
  {
    nonce: BigNumber;
    sender: string;
    token: string;
    amount: BigNumber;
    targetTubeID: BigNumber;
    recipient: string;
    fee: BigNumber;
  }
>;

export type ReceiptEventFilter = TypedEventFilter<ReceiptEvent>;

export type SettledEvent = TypedEvent<
  [string, string[]],
  { key: string; validators: string[] }
>;

export type SettledEventFilter = TypedEventFilter<SettledEvent>;

export type TaxRateUpdatedEvent = TypedEvent<[BigNumber], { rate: BigNumber }>;

export type TaxRateUpdatedEventFilter = TypedEventFilter<TaxRateUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ERC20Tube extends BaseContract {
  contractName: "ERC20Tube";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20TubeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    concatKeys(keys: BytesLike[], overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _targetTubeID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTo(
      _token: string,
      _amount: BigNumberish,
      _targetTubeID: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fees(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    genKey(
      _srcTubeID: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isSettled(key: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    ledger(overrides?: CallOverrides): Promise<[string]>;

    lord(overrides?: CallOverrides): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safe(overrides?: CallOverrides): Promise<[string]>;

    setFee(
      _tubeID: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRate(
      _taxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tubeID(overrides?: CallOverrides): Promise<[BigNumber]>;

    tubeToken(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _srcTubeID: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCoin(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _to: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  concatKeys(keys: BytesLike[], overrides?: CallOverrides): Promise<string>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    _targetTubeID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTo(
    _token: string,
    _amount: BigNumberish,
    _targetTubeID: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  genKey(
    _srcTubeID: BigNumberish,
    _nonce: BigNumberish,
    _token: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isSettled(key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  ledger(overrides?: CallOverrides): Promise<string>;

  lord(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safe(overrides?: CallOverrides): Promise<string>;

  setFee(
    _tubeID: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRate(
    _taxRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxRate(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tubeID(overrides?: CallOverrides): Promise<BigNumber>;

  tubeToken(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _srcTubeID: BigNumberish,
    _nonce: BigNumberish,
    _token: string,
    _recipient: string,
    _amount: BigNumberish,
    _signatures: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCoin(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _to: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    concatKeys(keys: BytesLike[], overrides?: CallOverrides): Promise<string>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _targetTubeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositTo(
      _token: string,
      _amount: BigNumberish,
      _targetTubeID: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    genKey(
      _srcTubeID: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isSettled(key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    ledger(overrides?: CallOverrides): Promise<string>;

    lord(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safe(overrides?: CallOverrides): Promise<string>;

    setFee(
      _tubeID: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRate(
      _taxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tubeID(overrides?: CallOverrides): Promise<BigNumber>;

    tubeToken(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _srcTubeID: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCoin(_to: string, overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      _to: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeUpdated(uint256,uint256)"(
      tubeID?: null,
      fee?: null
    ): FeeUpdatedEventFilter;
    FeeUpdated(tubeID?: null, fee?: null): FeeUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Receipt(uint256,address,address,uint256,uint256,address,uint256)"(
      nonce?: BigNumberish | null,
      sender?: null,
      token?: string | null,
      amount?: null,
      targetTubeID?: BigNumberish | null,
      recipient?: null,
      fee?: null
    ): ReceiptEventFilter;
    Receipt(
      nonce?: BigNumberish | null,
      sender?: null,
      token?: string | null,
      amount?: null,
      targetTubeID?: BigNumberish | null,
      recipient?: null,
      fee?: null
    ): ReceiptEventFilter;

    "Settled(bytes32,address[])"(
      key?: BytesLike | null,
      validators?: null
    ): SettledEventFilter;
    Settled(key?: BytesLike | null, validators?: null): SettledEventFilter;

    "TaxRateUpdated(uint256)"(rate?: null): TaxRateUpdatedEventFilter;
    TaxRateUpdated(rate?: null): TaxRateUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    concatKeys(
      keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _targetTubeID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTo(
      _token: string,
      _amount: BigNumberish,
      _targetTubeID: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    genKey(
      _srcTubeID: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSettled(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<BigNumber>;

    lord(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safe(overrides?: CallOverrides): Promise<BigNumber>;

    setFee(
      _tubeID: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRate(
      _taxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tubeID(overrides?: CallOverrides): Promise<BigNumber>;

    tubeToken(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _srcTubeID: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCoin(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _to: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    concatKeys(
      keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _targetTubeID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTo(
      _token: string,
      _amount: BigNumberish,
      _targetTubeID: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genKey(
      _srcTubeID: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSettled(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lord(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFee(
      _tubeID: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      _taxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tubeID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tubeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _srcTubeID: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCoin(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _to: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
