/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VerifierInterface extends utils.Interface {
  contractName: "Verifier";
  functions: {
    "VALIDATOR_LIMIT()": FunctionFragment;
    "addAll(address[])": FunctionFragment;
    "get(uint256,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAll(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "size()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validators(uint256)": FunctionFragment;
    "verify(bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "VALIDATOR_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addAll", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeAll", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "size", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "VALIDATOR_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "size", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ValidatorAdded(address)": EventFragment;
    "ValidatorRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRemoved"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ValidatorAddedEvent = TypedEvent<[string], { validator: string }>;

export type ValidatorAddedEventFilter = TypedEventFilter<ValidatorAddedEvent>;

export type ValidatorRemovedEvent = TypedEvent<[string], { validator: string }>;

export type ValidatorRemovedEventFilter =
  TypedEventFilter<ValidatorRemovedEvent>;

export interface Verifier extends BaseContract {
  contractName: "Verifier";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VALIDATOR_LIMIT(overrides?: CallOverrides): Promise<[number]>;

    addAll(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { count_: BigNumber; validators_: string[] }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAll(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    size(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verify(
      _key: BytesLike,
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[]] & { isValid_: boolean; validators_: string[] }
    >;
  };

  VALIDATOR_LIMIT(overrides?: CallOverrides): Promise<number>;

  addAll(
    _validators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string[]] & { count_: BigNumber; validators_: string[] }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAll(
    _validators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  size(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  verify(
    _key: BytesLike,
    _signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string[]] & { isValid_: boolean; validators_: string[] }
  >;

  callStatic: {
    VALIDATOR_LIMIT(overrides?: CallOverrides): Promise<number>;

    addAll(_validators: string[], overrides?: CallOverrides): Promise<void>;

    get(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { count_: BigNumber; validators_: string[] }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAll(_validators: string[], overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    size(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    verify(
      _key: BytesLike,
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[]] & { isValid_: boolean; validators_: string[] }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ValidatorAdded(address)"(
      validator?: string | null
    ): ValidatorAddedEventFilter;
    ValidatorAdded(validator?: string | null): ValidatorAddedEventFilter;

    "ValidatorRemoved(address)"(
      validator?: string | null
    ): ValidatorRemovedEventFilter;
    ValidatorRemoved(validator?: string | null): ValidatorRemovedEventFilter;
  };

  estimateGas: {
    VALIDATOR_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    addAll(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAll(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    size(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      _key: BytesLike,
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VALIDATOR_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAll(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAll(
      _validators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    size(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      _key: BytesLike,
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
