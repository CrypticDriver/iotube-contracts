/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockSafeInterface extends utils.Interface {
  contractName: "MockSafe";
  functions: {
    "deposit(address,address,uint256)": FunctionFragment;
    "points(address,address)": FunctionFragment;
    "safe()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "points",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "safe", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "points", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safe", data: BytesLike): Result;

  events: {
    "DepositToSafe(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositToSafe"): EventFragment;
}

export type DepositToSafeEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; recipient: string; amount: BigNumber }
>;

export type DepositToSafeEventFilter = TypedEventFilter<DepositToSafeEvent>;

export interface MockSafe extends BaseContract {
  contractName: "MockSafe";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockSafeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    points(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    safe(overrides?: CallOverrides): Promise<[string]>;
  };

  deposit(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  points(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safe(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deposit(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    points(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safe(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DepositToSafe(address,address,uint256)"(
      token?: null,
      recipient?: null,
      amount?: null
    ): DepositToSafeEventFilter;
    DepositToSafe(
      token?: null,
      recipient?: null,
      amount?: null
    ): DepositToSafeEventFilter;
  };

  estimateGas: {
    deposit(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    points(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safe(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    points(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safe(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
