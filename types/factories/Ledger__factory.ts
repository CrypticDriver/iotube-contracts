/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ledger, LedgerInterface } from "../Ledger";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "candidate",
        type: "address",
      },
    ],
    name: "CandidateOwnerNominated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "candidateOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "record",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "records",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081179091556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a1610357806100686000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638eaa6ac01161005b5780638eaa6ac0146100ea578063b5c645bd1461010a578063c105ea2b1461011d578063f2fde38b1461013057600080fd5b806301e647251461008257806379ba5097146100b55780638da5cb5b146100bf575b600080fd5b6100a2610090366004610331565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6100bd610143565b005b6000546100d2906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b6100a26100f8366004610331565b60009081526002602052604090205490565b6100bd610118366004610331565b610203565b6001546100d2906001600160a01b031681565b6100bd61013e366004610301565b610289565b6001546001600160a01b031633146101a25760405162461bcd60e51b815260206004820152601360248201527f6e6f742063616e646964617465206f776e65720000000000000000000000000060448201526064015b60405180910390fd5b600080543373ffffffffffffffffffffffffffffffffffffffff1991821681179092556001805490911690556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a1565b6000546001600160a01b0316331461021a57600080fd5b600081815260026020526040902054156102765760405162461bcd60e51b815260206004820152601160248201527f616c726561647920696e206c65646765720000000000000000000000000000006044820152606401610199565b6000908152600260205260409020439055565b6000546001600160a01b031633146102a057600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fab11dce89b1a257bd34e6e64673d157494c9bcf04f4e63b990bc87a2cf21fc309060200160405180910390a150565b60006020828403121561031357600080fd5b81356001600160a01b038116811461032a57600080fd5b9392505050565b60006020828403121561034357600080fd5b503591905056fea164736f6c6343000807000a";

type LedgerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LedgerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Ledger__factory extends ContractFactory {
  constructor(...args: LedgerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Ledger";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ledger> {
    return super.deploy(overrides || {}) as Promise<Ledger>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Ledger {
    return super.attach(address) as Ledger;
  }
  connect(signer: Signer): Ledger__factory {
    return super.connect(signer) as Ledger__factory;
  }
  static readonly contractName: "Ledger";
  public readonly contractName: "Ledger";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LedgerInterface {
    return new utils.Interface(_abi) as LedgerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ledger {
    return new Contract(address, _abi, signerOrProvider) as Ledger;
  }
}
