/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lord, LordInterface } from "../Lord";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAllowlist",
        name: "_standardTokenList",
        type: "address",
      },
      {
        internalType: "contract IMinter",
        name: "_tokenSafe",
        type: "address",
      },
      {
        internalType: "contract IAllowlist",
        name: "_proxyTokenList",
        type: "address",
      },
      {
        internalType: "contract IMinter",
        name: "_minterPool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "candidate",
        type: "address",
      },
    ],
    name: "CandidateOwnerNominated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
    ],
    name: "burnNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "candidateOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "mintNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "minterPool",
    outputs: [
      {
        internalType: "contract IMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxyTokenList",
    outputs: [
      {
        internalType: "contract IAllowlist",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "standardTokenList",
    outputs: [
      {
        internalType: "contract IAllowlist",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenSafe",
    outputs: [
      {
        internalType: "contract IMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newLord",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051620011ab380380620011ab833981016040819052610031916100cc565b600080546001600160a01b031916339081179091556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a1600280546001600160a01b039586166001600160a01b0319918216179091556003805494861694821694909417909355600480549285169284169290921790915560058054919093169116179055610143565b600080600080608085870312156100e257600080fd5b84516100ed8161012b565b60208601519094506100fe8161012b565b604086015190935061010f8161012b565b60608601519092506101208161012b565b939692955090935050565b6001600160a01b038116811461014057600080fd5b50565b61105880620001536000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063c105ea2b11610066578063c105ea2b146101a2578063c6c3bbe6146101b5578063f2fde38b146101c8578063f6b911bc146101db57600080fd5b80638da5cb5b146101695780639aee90391461017c578063aaf689171461018f57600080fd5b806347fcf018116100bd57806347fcf0181461013b57806379ba50971461014e5780637b3102f01461015657600080fd5b80630900f010146100e45780631c4fda10146100f95780634092de4514610128575b600080fd5b6100f76100f2366004610dbb565b6101ee565b005b60035461010c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100f7610136366004610e62565b6103d8565b6100f7610149366004610e36565b610457565b6100f76104cc565b60045461010c906001600160a01b031681565b60005461010c906001600160a01b031681565b60025461010c906001600160a01b031681565b60055461010c906001600160a01b031681565b60015461010c906001600160a01b031681565b6100f76101c3366004610df5565b61058c565b6100f76101d6366004610dbb565b6108bc565b6100f76101e9366004610df5565b610934565b6000546001600160a01b0316331461020557600080fd5b60055460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b15801561024957600080fd5b505afa15801561025d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102819190610dd8565b6001600160a01b0316141561031d576005546040516001600160a01b03838116602483015261031d92169063f2fde38b60e01b906044015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610b3c565b60035460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b15801561036157600080fd5b505afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190610dd8565b6001600160a01b031614156103d5576003546040516001600160a01b0383811660248301526103d592169063f2fde38b60e01b906044016102b9565b50565b6000546001600160a01b031633146103ef57600080fd5b604051638832e6e360e01b81526001600160a01b03851690638832e6e39061041f90859087908690600401610fac565b600060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b0316331461046e57600080fd5b604051630852cd8d60e31b8152600481018290526001600160a01b038316906342966c6890602401600060405180830381600087803b1580156104b057600080fd5b505af11580156104c4573d6000803e3d6000fd5b505050505050565b6001546001600160a01b0316331461052b5760405162461bcd60e51b815260206004820152601360248201527f6e6f742063616e646964617465206f776e65720000000000000000000000000060448201526064015b60405180910390fd5b600080543373ffffffffffffffffffffffffffffffffffffffff1991821681179092556001805490911690556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a1565b6000546001600160a01b031633146105a357600080fd5b6002546001600160a01b031615801590610635575060025460405163babcc53960e01b81526001600160a01b0385811660048301529091169063babcc5399060240160206040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190610f42565b1561071957600354604051636361ddf360e11b81526001600160a01b0385811660048301528481166024830152604482018490529091169063c6c3bbe690606401602060405180830381600087803b15801561069057600080fd5b505af11580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190610f42565b6107145760405162461bcd60e51b815260206004820152601660248201527f746f6b656e2073616665206d696e74206661696c6564000000000000000000006044820152606401610522565b505050565b6004546001600160a01b0316158015906107ad57506004805460405163babcc53960e01b81526001600160a01b038681169382019390935291169063babcc5399060240160206040518083038186803b15801561077557600080fd5b505afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad9190610f42565b1561088c57600554604051636361ddf360e11b81526001600160a01b0385811660048301528481166024830152604482018490529091169063c6c3bbe690606401602060405180830381600087803b15801561080857600080fd5b505af115801561081c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108409190610f42565b61088c5760405162461bcd60e51b815260206004820152601760248201527f70726f787920746f6b656e206d696e74206661696c65640000000000000000006044820152606401610522565b6040516001600160a01b0383166024820152604481018290526107149084906340c10f1960e01b906064016102b9565b6000546001600160a01b031633146108d357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fab11dce89b1a257bd34e6e64673d157494c9bcf04f4e63b990bc87a2cf21fc309060200160405180910390a150565b6000546001600160a01b0316331461094b57600080fd5b6002546001600160a01b0316158015906109dd575060025460405163babcc53960e01b81526001600160a01b0385811660048301529091169063babcc5399060240160206040518083038186803b1580156109a557600080fd5b505afa1580156109b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dd9190610f42565b15610a1e576003546040516001600160a01b0380851660248301529091166044820152606481018290526107149084906323b872dd60e01b906084016102b9565b6004546001600160a01b031615801590610ab257506004805460405163babcc53960e01b81526001600160a01b038681169382019390935291169063babcc5399060240160206040518083038186803b158015610a7a57600080fd5b505afa158015610a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab29190610f42565b15610b0c576040516001600160a01b038316602482015230604482015260648101829052610aed9084906323b872dd60e01b906084016102b9565b610714836342966c6860e01b836040516024016102b991815260200190565b6040516001600160a01b03831660248201526044810182905261071490849063079cc67960e41b906064016102b9565b6000610b91826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c219092919063ffffffff16565b8051909150156107145780806020019051810190610baf9190610f42565b6107145760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610522565b6060610c308484600085610c3a565b90505b9392505050565b606082471015610cb25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610522565b6001600160a01b0385163b610d095760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610522565b600080866001600160a01b03168587604051610d259190610f90565b60006040518083038185875af1925050503d8060008114610d62576040519150601f19603f3d011682016040523d82523d6000602084013e610d67565b606091505b5091509150610d77828286610d82565b979650505050505050565b60608315610d91575081610c33565b825115610da15782518084602001fd5b8160405162461bcd60e51b81526004016105229190610fdd565b600060208284031215610dcd57600080fd5b8135610c3381611036565b600060208284031215610dea57600080fd5b8151610c3381611036565b600080600060608486031215610e0a57600080fd5b8335610e1581611036565b92506020840135610e2581611036565b929592945050506040919091013590565b60008060408385031215610e4957600080fd5b8235610e5481611036565b946020939093013593505050565b60008060008060808587031215610e7857600080fd5b8435610e8381611036565b9350602085013592506040850135610e9a81611036565b9150606085013567ffffffffffffffff80821115610eb757600080fd5b818701915087601f830112610ecb57600080fd5b813581811115610edd57610edd611020565b604051601f8201601f19908116603f01168101908382118183101715610f0557610f05611020565b816040528281528a6020848701011115610f1e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600060208284031215610f5457600080fd5b81518015158114610c3357600080fd5b60008151808452610f7c816020860160208601610ff0565b601f01601f19169290920160200192915050565b60008251610fa2818460208701610ff0565b9190910192915050565b6001600160a01b0384168152826020820152606060408201526000610fd46060830184610f64565b95945050505050565b602081526000610c336020830184610f64565b60005b8381101561100b578181015183820152602001610ff3565b8381111561101a576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146103d557600080fdfea164736f6c6343000807000a";

type LordConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LordConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lord__factory extends ContractFactory {
  constructor(...args: LordConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Lord";
  }

  deploy(
    _standardTokenList: string,
    _tokenSafe: string,
    _proxyTokenList: string,
    _minterPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lord> {
    return super.deploy(
      _standardTokenList,
      _tokenSafe,
      _proxyTokenList,
      _minterPool,
      overrides || {}
    ) as Promise<Lord>;
  }
  getDeployTransaction(
    _standardTokenList: string,
    _tokenSafe: string,
    _proxyTokenList: string,
    _minterPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _standardTokenList,
      _tokenSafe,
      _proxyTokenList,
      _minterPool,
      overrides || {}
    );
  }
  attach(address: string): Lord {
    return super.attach(address) as Lord;
  }
  connect(signer: Signer): Lord__factory {
    return super.connect(signer) as Lord__factory;
  }
  static readonly contractName: "Lord";
  public readonly contractName: "Lord";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LordInterface {
    return new utils.Interface(_abi) as LordInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Lord {
    return new Contract(address, _abi, signerOrProvider) as Lord;
  }
}
