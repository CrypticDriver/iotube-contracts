/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LordInterface extends utils.Interface {
  contractName: "Lord";
  functions: {
    "acceptOwnership()": FunctionFragment;
    "burn(address,address,uint256)": FunctionFragment;
    "burnNFT(address,uint256)": FunctionFragment;
    "candidateOwner()": FunctionFragment;
    "mint(address,address,uint256)": FunctionFragment;
    "mintNFT(address,uint256,address,bytes)": FunctionFragment;
    "minterPool()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxyTokenList()": FunctionFragment;
    "standardTokenList()": FunctionFragment;
    "tokenSafe()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgrade(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnNFT",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFT",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minterPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "standardTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenSafe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minterPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "standardTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;

  events: {
    "CandidateOwnerNominated(address)": EventFragment;
    "OwnershipTransferred(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CandidateOwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CandidateOwnerNominatedEvent = TypedEvent<
  [string],
  { candidate: string }
>;

export type CandidateOwnerNominatedEventFilter =
  TypedEventFilter<CandidateOwnerNominatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string], { owner: string }>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Lord extends BaseContract {
  contractName: "Lord";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LordInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      _token: string,
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnNFT(
      _token: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    candidateOwner(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNFT(
      _token: string,
      _tokenID: BigNumberish,
      _recipient: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minterPool(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxyTokenList(overrides?: CallOverrides): Promise<[string]>;

    standardTokenList(overrides?: CallOverrides): Promise<[string]>;

    tokenSafe(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      _newLord: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    _token: string,
    _sender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnNFT(
    _token: string,
    _tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  candidateOwner(overrides?: CallOverrides): Promise<string>;

  mint(
    _token: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNFT(
    _token: string,
    _tokenID: BigNumberish,
    _recipient: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minterPool(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxyTokenList(overrides?: CallOverrides): Promise<string>;

  standardTokenList(overrides?: CallOverrides): Promise<string>;

  tokenSafe(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    _newLord: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    burn(
      _token: string,
      _sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnNFT(
      _token: string,
      _tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    candidateOwner(overrides?: CallOverrides): Promise<string>;

    mint(
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintNFT(
      _token: string,
      _tokenID: BigNumberish,
      _recipient: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    minterPool(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxyTokenList(overrides?: CallOverrides): Promise<string>;

    standardTokenList(overrides?: CallOverrides): Promise<string>;

    tokenSafe(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(_newLord: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CandidateOwnerNominated(address)"(
      candidate?: null
    ): CandidateOwnerNominatedEventFilter;
    CandidateOwnerNominated(
      candidate?: null
    ): CandidateOwnerNominatedEventFilter;

    "OwnershipTransferred(address)"(
      owner?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(owner?: null): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      _token: string,
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnNFT(
      _token: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    candidateOwner(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNFT(
      _token: string,
      _tokenID: BigNumberish,
      _recipient: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minterPool(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxyTokenList(overrides?: CallOverrides): Promise<BigNumber>;

    standardTokenList(overrides?: CallOverrides): Promise<BigNumber>;

    tokenSafe(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrade(
      _newLord: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      _token: string,
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnNFT(
      _token: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    candidateOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNFT(
      _token: string,
      _tokenID: BigNumberish,
      _recipient: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minterPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyTokenList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    standardTokenList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      _newLord: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
