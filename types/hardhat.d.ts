/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetRegistry__factory>;
    getContractFactory(
      name: "AssetUpperBound",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetUpperBound__factory>;
    getContractFactory(
      name: "CrosschainCoinRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrosschainCoinRouter__factory>;
    getContractFactory(
      name: "WrappedCoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedCoin__factory>;
    getContractFactory(
      name: "CrosschainERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrosschainERC20__factory>;
    getContractFactory(
      name: "CrosschainERC20Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrosschainERC20Factory__factory>;
    getContractFactory(
      name: "CrosschainERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrosschainERC721__factory>;
    getContractFactory(
      name: "IAllowlist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllowlist__factory>;
    getContractFactory(
      name: "ISwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwap__factory>;
    getContractFactory(
      name: "Ledger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ledger__factory>;
    getContractFactory(
      name: "IAllowlist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllowlist__factory>;
    getContractFactory(
      name: "IERC721Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Mintable__factory>;
    getContractFactory(
      name: "IMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinter__factory>;
    getContractFactory(
      name: "IToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IToken__factory>;
    getContractFactory(
      name: "Lord",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lord__factory>;
    getContractFactory(
      name: "LPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPToken__factory>;
    getContractFactory(
      name: "MathUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MathUtils__factory>;
    getContractFactory(
      name: "MockSafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSafe__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "OwnerPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerPausable__factory>;
    getContractFactory(
      name: "Swap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Swap__factory>;
    getContractFactory(
      name: "SwapUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapUtils__factory>;
    getContractFactory(
      name: "TestimonyDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestimonyDAO__factory>;
    getContractFactory(
      name: "ILedger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILedger__factory>;
    getContractFactory(
      name: "ILord",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILord__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "Tube",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Tube__factory>;
    getContractFactory(
      name: "ITube",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITube__factory>;
    getContractFactory(
      name: "TubeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TubeRouter__factory>;
    getContractFactory(
      name: "TubeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TubeToken__factory>;
    getContractFactory(
      name: "AssetRegistryV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetRegistryV2__factory>;
    getContractFactory(
      name: "ERC20Tube",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Tube__factory>;
    getContractFactory(
      name: "IBurnableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBurnableERC20__factory>;
    getContractFactory(
      name: "ILedger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILedger__factory>;
    getContractFactory(
      name: "ILord",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILord__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IAllowlist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllowlist__factory>;
    getContractFactory(
      name: "IMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinter__factory>;
    getContractFactory(
      name: "IToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IToken__factory>;
    getContractFactory(
      name: "LordV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LordV2__factory>;
    getContractFactory(
      name: "ValidatorRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorRegistry__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;
    getContractFactory(
      name: "WIOTX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WIOTX__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AssetRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetRegistry>;
    getContractAt(
      name: "AssetUpperBound",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetUpperBound>;
    getContractAt(
      name: "CrosschainCoinRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrosschainCoinRouter>;
    getContractAt(
      name: "WrappedCoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedCoin>;
    getContractAt(
      name: "CrosschainERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrosschainERC20>;
    getContractAt(
      name: "CrosschainERC20Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrosschainERC20Factory>;
    getContractAt(
      name: "CrosschainERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrosschainERC721>;
    getContractAt(
      name: "IAllowlist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllowlist>;
    getContractAt(
      name: "ISwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwap>;
    getContractAt(
      name: "Ledger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ledger>;
    getContractAt(
      name: "IAllowlist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllowlist>;
    getContractAt(
      name: "IERC721Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Mintable>;
    getContractAt(
      name: "IMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinter>;
    getContractAt(
      name: "IToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IToken>;
    getContractAt(
      name: "Lord",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lord>;
    getContractAt(
      name: "LPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPToken>;
    getContractAt(
      name: "MathUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MathUtils>;
    getContractAt(
      name: "MockSafe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSafe>;
    getContractAt(
      name: "MockToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "OwnerPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerPausable>;
    getContractAt(
      name: "Swap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Swap>;
    getContractAt(
      name: "SwapUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapUtils>;
    getContractAt(
      name: "TestimonyDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestimonyDAO>;
    getContractAt(
      name: "ILedger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILedger>;
    getContractAt(
      name: "ILord",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILord>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "Tube",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Tube>;
    getContractAt(
      name: "ITube",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITube>;
    getContractAt(
      name: "TubeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TubeRouter>;
    getContractAt(
      name: "TubeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TubeToken>;
    getContractAt(
      name: "AssetRegistryV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetRegistryV2>;
    getContractAt(
      name: "ERC20Tube",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Tube>;
    getContractAt(
      name: "IBurnableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBurnableERC20>;
    getContractAt(
      name: "ILedger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILedger>;
    getContractAt(
      name: "ILord",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILord>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IAllowlist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllowlist>;
    getContractAt(
      name: "IMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinter>;
    getContractAt(
      name: "IToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IToken>;
    getContractAt(
      name: "LordV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LordV2>;
    getContractAt(
      name: "ValidatorRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorRegistry>;
    getContractAt(
      name: "Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;
    getContractAt(
      name: "WIOTX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WIOTX>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
