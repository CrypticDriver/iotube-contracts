/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestimonyDAOInterface extends utils.Interface {
  contractName: "TestimonyDAO";
  functions: {
    "addTestimony(bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTestimony",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTestimony",
    data: BytesLike
  ): Result;

  events: {
    "Testimony(address,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Testimony"): EventFragment;
}

export type TestimonyEvent = TypedEvent<
  [string, string, string],
  { validator: string; key: string; testimony: string }
>;

export type TestimonyEventFilter = TypedEventFilter<TestimonyEvent>;

export interface TestimonyDAO extends BaseContract {
  contractName: "TestimonyDAO";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestimonyDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTestimony(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTestimony(
    key: BytesLike,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTestimony(
      key: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Testimony(address,bytes32,bytes)"(
      validator?: string | null,
      key?: BytesLike | null,
      testimony?: null
    ): TestimonyEventFilter;
    Testimony(
      validator?: string | null,
      key?: BytesLike | null,
      testimony?: null
    ): TestimonyEventFilter;
  };

  estimateGas: {
    addTestimony(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTestimony(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
